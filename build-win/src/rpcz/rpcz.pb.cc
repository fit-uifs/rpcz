// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcz.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpcz.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpcz {

namespace {

const ::google::protobuf::Descriptor* rpc_request_header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rpc_request_header_reflection_ = NULL;
const ::google::protobuf::Descriptor* rpc_response_header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rpc_response_header_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* rpc_response_header_status_code_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* rpc_response_header_application_error_code_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpcz_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_rpcz_2eproto() {
  protobuf_AddDesc_rpcz_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpcz.proto");
  GOOGLE_CHECK(file != NULL);
  rpc_request_header_descriptor_ = file->message_type(0);
  static const int rpc_request_header_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rpc_request_header, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rpc_request_header, deadline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rpc_request_header, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rpc_request_header, method_),
  };
  rpc_request_header_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rpc_request_header_descriptor_,
      rpc_request_header::internal_default_instance(),
      rpc_request_header_offsets_,
      -1,
      -1,
      -1,
      sizeof(rpc_request_header),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rpc_request_header, _internal_metadata_));
  rpc_response_header_descriptor_ = file->message_type(1);
  static const int rpc_response_header_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rpc_response_header, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rpc_response_header, application_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rpc_response_header, error_),
  };
  rpc_response_header_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rpc_response_header_descriptor_,
      rpc_response_header::internal_default_instance(),
      rpc_response_header_offsets_,
      -1,
      -1,
      -1,
      sizeof(rpc_response_header),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rpc_response_header, _internal_metadata_));
  rpc_response_header_status_code_descriptor_ = rpc_response_header_descriptor_->enum_type(0);
  rpc_response_header_application_error_code_descriptor_ = rpc_response_header_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpcz_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rpc_request_header_descriptor_, rpc_request_header::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rpc_response_header_descriptor_, rpc_response_header::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpcz_2eproto() {
  rpc_request_header_default_instance_.Shutdown();
  delete rpc_request_header_reflection_;
  rpc_response_header_default_instance_.Shutdown();
  delete rpc_response_header_reflection_;
}

void protobuf_InitDefaults_rpcz_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  rpc_request_header_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  rpc_response_header_default_instance_.DefaultConstruct();
  rpc_request_header_default_instance_.get_mutable()->InitAsDefaultInstance();
  rpc_response_header_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_rpcz_2eproto_once_);
void protobuf_InitDefaults_rpcz_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_rpcz_2eproto_once_,
                 &protobuf_InitDefaults_rpcz_2eproto_impl);
}
void protobuf_AddDesc_rpcz_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_rpcz_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nrpcz.proto\022\004rpcz\"Y\n\022rpc_request_header"
    "\022\020\n\010event_id\030\001 \001(\003\022\020\n\010deadline\030\002 \001(\005\022\017\n\007"
    "service\030\003 \001(\t\022\016\n\006method\030\004 \001(\t\"\270\003\n\023rpc_re"
    "sponse_header\0225\n\006status\030\001 \001(\0162%.rpcz.rpc"
    "_response_header.status_code\022\031\n\021applicat"
    "ion_error\030\002 \001(\005\022\r\n\005error\030\003 \001(\t\"|\n\013status"
    "_code\022\006\n\002OK\020\000\022\n\n\006ACTIVE\020\001\022\014\n\010INACTIVE\020\002\022"
    "\r\n\tCANCELLED\020\003\022\025\n\021APPLICATION_ERROR\020\004\022\025\n"
    "\021DEADLINE_EXCEEDED\020\005\022\016\n\nTERMINATED\020\006\"\301\001\n"
    "\026application_error_code\022\014\n\010NO_ERROR\020\000\022\033\n"
    "\016INVALID_HEADER\020\377\377\377\377\377\377\377\377\377\001\022\034\n\017NO_SUCH_SE"
    "RVICE\020\376\377\377\377\377\377\377\377\377\001\022\033\n\016NO_SUCH_METHOD\020\375\377\377\377\377"
    "\377\377\377\377\001\022\034\n\017INVALID_MESSAGE\020\374\377\377\377\377\377\377\377\377\001\022#\n\026M"
    "ETHOD_NOT_IMPLEMENTED\020\373\377\377\377\377\377\377\377\377\001b\006proto3", 560);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpcz.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpcz_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_rpcz_2eproto_once_);
void protobuf_AddDesc_rpcz_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_rpcz_2eproto_once_,
                 &protobuf_AddDesc_rpcz_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpcz_2eproto {
  StaticDescriptorInitializer_rpcz_2eproto() {
    protobuf_AddDesc_rpcz_2eproto();
  }
} static_descriptor_initializer_rpcz_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rpc_request_header::kEventIdFieldNumber;
const int rpc_request_header::kDeadlineFieldNumber;
const int rpc_request_header::kServiceFieldNumber;
const int rpc_request_header::kMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rpc_request_header::rpc_request_header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_rpcz_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpcz.rpc_request_header)
}

void rpc_request_header::InitAsDefaultInstance() {
}

rpc_request_header::rpc_request_header(const rpc_request_header& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpcz.rpc_request_header)
}

void rpc_request_header::SharedCtor() {
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_id_, 0, reinterpret_cast<char*>(&deadline_) -
    reinterpret_cast<char*>(&event_id_) + sizeof(deadline_));
  _cached_size_ = 0;
}

rpc_request_header::~rpc_request_header() {
  // @@protoc_insertion_point(destructor:rpcz.rpc_request_header)
  SharedDtor();
}

void rpc_request_header::SharedDtor() {
  service_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void rpc_request_header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rpc_request_header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rpc_request_header_descriptor_;
}

const rpc_request_header& rpc_request_header::default_instance() {
  protobuf_InitDefaults_rpcz_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<rpc_request_header> rpc_request_header_default_instance_;

rpc_request_header* rpc_request_header::New(::google::protobuf::Arena* arena) const {
  rpc_request_header* n = new rpc_request_header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rpc_request_header::Clear() {
// @@protoc_insertion_point(message_clear_start:rpcz.rpc_request_header)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(rpc_request_header, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rpc_request_header*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(event_id_, deadline_);
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool rpc_request_header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpcz.rpc_request_header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 event_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_deadline;
        break;
      }

      // optional int32 deadline = 2;
      case 2: {
        if (tag == 16) {
         parse_deadline:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deadline_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_service;
        break;
      }

      // optional string service = 3;
      case 3: {
        if (tag == 26) {
         parse_service:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service().data(), this->service().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpcz.rpc_request_header.service"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_method;
        break;
      }

      // optional string method = 4;
      case 4: {
        if (tag == 34) {
         parse_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpcz.rpc_request_header.method"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpcz.rpc_request_header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpcz.rpc_request_header)
  return false;
#undef DO_
}

void rpc_request_header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpcz.rpc_request_header)
  // optional int64 event_id = 1;
  if (this->event_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->event_id(), output);
  }

  // optional int32 deadline = 2;
  if (this->deadline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->deadline(), output);
  }

  // optional string service = 3;
  if (this->service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpcz.rpc_request_header.service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->service(), output);
  }

  // optional string method = 4;
  if (this->method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpcz.rpc_request_header.method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->method(), output);
  }

  // @@protoc_insertion_point(serialize_end:rpcz.rpc_request_header)
}

::google::protobuf::uint8* rpc_request_header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rpcz.rpc_request_header)
  // optional int64 event_id = 1;
  if (this->event_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->event_id(), target);
  }

  // optional int32 deadline = 2;
  if (this->deadline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->deadline(), target);
  }

  // optional string service = 3;
  if (this->service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpcz.rpc_request_header.service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->service(), target);
  }

  // optional string method = 4;
  if (this->method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpcz.rpc_request_header.method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->method(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpcz.rpc_request_header)
  return target;
}

size_t rpc_request_header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpcz.rpc_request_header)
  size_t total_size = 0;

  // optional int64 event_id = 1;
  if (this->event_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->event_id());
  }

  // optional int32 deadline = 2;
  if (this->deadline() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->deadline());
  }

  // optional string service = 3;
  if (this->service().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service());
  }

  // optional string method = 4;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rpc_request_header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpcz.rpc_request_header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rpc_request_header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rpc_request_header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpcz.rpc_request_header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpcz.rpc_request_header)
    UnsafeMergeFrom(*source);
  }
}

void rpc_request_header::MergeFrom(const rpc_request_header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpcz.rpc_request_header)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void rpc_request_header::UnsafeMergeFrom(const rpc_request_header& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.event_id() != 0) {
    set_event_id(from.event_id());
  }
  if (from.deadline() != 0) {
    set_deadline(from.deadline());
  }
  if (from.service().size() > 0) {

    service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
  }
  if (from.method().size() > 0) {

    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
}

void rpc_request_header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpcz.rpc_request_header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rpc_request_header::CopyFrom(const rpc_request_header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpcz.rpc_request_header)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool rpc_request_header::IsInitialized() const {

  return true;
}

void rpc_request_header::Swap(rpc_request_header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rpc_request_header::InternalSwap(rpc_request_header* other) {
  std::swap(event_id_, other->event_id_);
  std::swap(deadline_, other->deadline_);
  service_.Swap(&other->service_);
  method_.Swap(&other->method_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rpc_request_header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rpc_request_header_descriptor_;
  metadata.reflection = rpc_request_header_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rpc_request_header

// optional int64 event_id = 1;
void rpc_request_header::clear_event_id() {
  event_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 rpc_request_header::event_id() const {
  // @@protoc_insertion_point(field_get:rpcz.rpc_request_header.event_id)
  return event_id_;
}
void rpc_request_header::set_event_id(::google::protobuf::int64 value) {
  
  event_id_ = value;
  // @@protoc_insertion_point(field_set:rpcz.rpc_request_header.event_id)
}

// optional int32 deadline = 2;
void rpc_request_header::clear_deadline() {
  deadline_ = 0;
}
::google::protobuf::int32 rpc_request_header::deadline() const {
  // @@protoc_insertion_point(field_get:rpcz.rpc_request_header.deadline)
  return deadline_;
}
void rpc_request_header::set_deadline(::google::protobuf::int32 value) {
  
  deadline_ = value;
  // @@protoc_insertion_point(field_set:rpcz.rpc_request_header.deadline)
}

// optional string service = 3;
void rpc_request_header::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& rpc_request_header::service() const {
  // @@protoc_insertion_point(field_get:rpcz.rpc_request_header.service)
  return service_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rpc_request_header::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpcz.rpc_request_header.service)
}
void rpc_request_header::set_service(const char* value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpcz.rpc_request_header.service)
}
void rpc_request_header::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpcz.rpc_request_header.service)
}
::std::string* rpc_request_header::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:rpcz.rpc_request_header.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* rpc_request_header::release_service() {
  // @@protoc_insertion_point(field_release:rpcz.rpc_request_header.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rpc_request_header::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:rpcz.rpc_request_header.service)
}

// optional string method = 4;
void rpc_request_header::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& rpc_request_header::method() const {
  // @@protoc_insertion_point(field_get:rpcz.rpc_request_header.method)
  return method_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rpc_request_header::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpcz.rpc_request_header.method)
}
void rpc_request_header::set_method(const char* value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpcz.rpc_request_header.method)
}
void rpc_request_header::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpcz.rpc_request_header.method)
}
::std::string* rpc_request_header::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:rpcz.rpc_request_header.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* rpc_request_header::release_method() {
  // @@protoc_insertion_point(field_release:rpcz.rpc_request_header.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rpc_request_header::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:rpcz.rpc_request_header.method)
}

inline const rpc_request_header* rpc_request_header::internal_default_instance() {
  return &rpc_request_header_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* rpc_response_header_status_code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rpc_response_header_status_code_descriptor_;
}
bool rpc_response_header_status_code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const rpc_response_header_status_code rpc_response_header::OK;
const rpc_response_header_status_code rpc_response_header::ACTIVE;
const rpc_response_header_status_code rpc_response_header::INACTIVE;
const rpc_response_header_status_code rpc_response_header::CANCELLED;
const rpc_response_header_status_code rpc_response_header::APPLICATION_ERROR;
const rpc_response_header_status_code rpc_response_header::DEADLINE_EXCEEDED;
const rpc_response_header_status_code rpc_response_header::TERMINATED;
const rpc_response_header_status_code rpc_response_header::status_code_MIN;
const rpc_response_header_status_code rpc_response_header::status_code_MAX;
const int rpc_response_header::status_code_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* rpc_response_header_application_error_code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rpc_response_header_application_error_code_descriptor_;
}
bool rpc_response_header_application_error_code_IsValid(int value) {
  switch (value) {
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const rpc_response_header_application_error_code rpc_response_header::NO_ERROR;
const rpc_response_header_application_error_code rpc_response_header::INVALID_HEADER;
const rpc_response_header_application_error_code rpc_response_header::NO_SUCH_SERVICE;
const rpc_response_header_application_error_code rpc_response_header::NO_SUCH_METHOD;
const rpc_response_header_application_error_code rpc_response_header::INVALID_MESSAGE;
const rpc_response_header_application_error_code rpc_response_header::METHOD_NOT_IMPLEMENTED;
const rpc_response_header_application_error_code rpc_response_header::application_error_code_MIN;
const rpc_response_header_application_error_code rpc_response_header::application_error_code_MAX;
const int rpc_response_header::application_error_code_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rpc_response_header::kStatusFieldNumber;
const int rpc_response_header::kApplicationErrorFieldNumber;
const int rpc_response_header::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rpc_response_header::rpc_response_header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_rpcz_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpcz.rpc_response_header)
}

void rpc_response_header::InitAsDefaultInstance() {
}

rpc_response_header::rpc_response_header(const rpc_response_header& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpcz.rpc_response_header)
}

void rpc_response_header::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, reinterpret_cast<char*>(&application_error_) -
    reinterpret_cast<char*>(&status_) + sizeof(application_error_));
  _cached_size_ = 0;
}

rpc_response_header::~rpc_response_header() {
  // @@protoc_insertion_point(destructor:rpcz.rpc_response_header)
  SharedDtor();
}

void rpc_response_header::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void rpc_response_header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rpc_response_header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rpc_response_header_descriptor_;
}

const rpc_response_header& rpc_response_header::default_instance() {
  protobuf_InitDefaults_rpcz_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<rpc_response_header> rpc_response_header_default_instance_;

rpc_response_header* rpc_response_header::New(::google::protobuf::Arena* arena) const {
  rpc_response_header* n = new rpc_response_header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rpc_response_header::Clear() {
// @@protoc_insertion_point(message_clear_start:rpcz.rpc_response_header)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(rpc_response_header, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<rpc_response_header*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(status_, application_error_);
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool rpc_response_header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpcz.rpc_response_header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rpcz.rpc_response_header.status_code status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::rpcz::rpc_response_header_status_code >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_application_error;
        break;
      }

      // optional int32 application_error = 2;
      case 2: {
        if (tag == 16) {
         parse_application_error:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &application_error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional string error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpcz.rpc_response_header.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpcz.rpc_response_header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpcz.rpc_response_header)
  return false;
#undef DO_
}

void rpc_response_header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpcz.rpc_response_header)
  // optional .rpcz.rpc_response_header.status_code status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional int32 application_error = 2;
  if (this->application_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->application_error(), output);
  }

  // optional string error = 3;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpcz.rpc_response_header.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:rpcz.rpc_response_header)
}

::google::protobuf::uint8* rpc_response_header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rpcz.rpc_response_header)
  // optional .rpcz.rpc_response_header.status_code status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional int32 application_error = 2;
  if (this->application_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->application_error(), target);
  }

  // optional string error = 3;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpcz.rpc_response_header.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpcz.rpc_response_header)
  return target;
}

size_t rpc_response_header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpcz.rpc_response_header)
  size_t total_size = 0;

  // optional .rpcz.rpc_response_header.status_code status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional int32 application_error = 2;
  if (this->application_error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->application_error());
  }

  // optional string error = 3;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rpc_response_header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpcz.rpc_response_header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rpc_response_header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rpc_response_header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpcz.rpc_response_header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpcz.rpc_response_header)
    UnsafeMergeFrom(*source);
  }
}

void rpc_response_header::MergeFrom(const rpc_response_header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpcz.rpc_response_header)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void rpc_response_header::UnsafeMergeFrom(const rpc_response_header& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.application_error() != 0) {
    set_application_error(from.application_error());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void rpc_response_header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpcz.rpc_response_header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rpc_response_header::CopyFrom(const rpc_response_header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpcz.rpc_response_header)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool rpc_response_header::IsInitialized() const {

  return true;
}

void rpc_response_header::Swap(rpc_response_header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rpc_response_header::InternalSwap(rpc_response_header* other) {
  std::swap(status_, other->status_);
  std::swap(application_error_, other->application_error_);
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rpc_response_header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rpc_response_header_descriptor_;
  metadata.reflection = rpc_response_header_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rpc_response_header

// optional .rpcz.rpc_response_header.status_code status = 1;
void rpc_response_header::clear_status() {
  status_ = 0;
}
::rpcz::rpc_response_header_status_code rpc_response_header::status() const {
  // @@protoc_insertion_point(field_get:rpcz.rpc_response_header.status)
  return static_cast< ::rpcz::rpc_response_header_status_code >(status_);
}
void rpc_response_header::set_status(::rpcz::rpc_response_header_status_code value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:rpcz.rpc_response_header.status)
}

// optional int32 application_error = 2;
void rpc_response_header::clear_application_error() {
  application_error_ = 0;
}
::google::protobuf::int32 rpc_response_header::application_error() const {
  // @@protoc_insertion_point(field_get:rpcz.rpc_response_header.application_error)
  return application_error_;
}
void rpc_response_header::set_application_error(::google::protobuf::int32 value) {
  
  application_error_ = value;
  // @@protoc_insertion_point(field_set:rpcz.rpc_response_header.application_error)
}

// optional string error = 3;
void rpc_response_header::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& rpc_response_header::error() const {
  // @@protoc_insertion_point(field_get:rpcz.rpc_response_header.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rpc_response_header::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpcz.rpc_response_header.error)
}
void rpc_response_header::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpcz.rpc_response_header.error)
}
void rpc_response_header::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpcz.rpc_response_header.error)
}
::std::string* rpc_response_header::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:rpcz.rpc_response_header.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* rpc_response_header::release_error() {
  // @@protoc_insertion_point(field_release:rpcz.rpc_response_header.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rpc_response_header::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:rpcz.rpc_response_header.error)
}

inline const rpc_response_header* rpc_response_header::internal_default_instance() {
  return &rpc_response_header_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpcz

// @@protoc_insertion_point(global_scope)
