// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcz.proto

#ifndef PROTOBUF_rpcz_2eproto__INCLUDED
#define PROTOBUF_rpcz_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rpcz {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_rpcz_2eproto();
void protobuf_InitDefaults_rpcz_2eproto();
void protobuf_AssignDesc_rpcz_2eproto();
void protobuf_ShutdownFile_rpcz_2eproto();

class rpc_request_header;
class rpc_response_header;

enum rpc_response_header_status_code {
  rpc_response_header_status_code_OK = 0,
  rpc_response_header_status_code_ACTIVE = 1,
  rpc_response_header_status_code_INACTIVE = 2,
  rpc_response_header_status_code_CANCELLED = 3,
  rpc_response_header_status_code_APPLICATION_ERROR = 4,
  rpc_response_header_status_code_DEADLINE_EXCEEDED = 5,
  rpc_response_header_status_code_TERMINATED = 6,
  rpc_response_header_status_code_rpc_response_header_status_code_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  rpc_response_header_status_code_rpc_response_header_status_code_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool rpc_response_header_status_code_IsValid(int value);
const rpc_response_header_status_code rpc_response_header_status_code_status_code_MIN = rpc_response_header_status_code_OK;
const rpc_response_header_status_code rpc_response_header_status_code_status_code_MAX = rpc_response_header_status_code_TERMINATED;
const int rpc_response_header_status_code_status_code_ARRAYSIZE = rpc_response_header_status_code_status_code_MAX + 1;

const ::google::protobuf::EnumDescriptor* rpc_response_header_status_code_descriptor();
inline const ::std::string& rpc_response_header_status_code_Name(rpc_response_header_status_code value) {
  return ::google::protobuf::internal::NameOfEnum(
    rpc_response_header_status_code_descriptor(), value);
}
inline bool rpc_response_header_status_code_Parse(
    const ::std::string& name, rpc_response_header_status_code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rpc_response_header_status_code>(
    rpc_response_header_status_code_descriptor(), name, value);
}
enum rpc_response_header_application_error_code {
  rpc_response_header_application_error_code_NO_ERROR = 0,
  rpc_response_header_application_error_code_INVALID_HEADER = -1,
  rpc_response_header_application_error_code_NO_SUCH_SERVICE = -2,
  rpc_response_header_application_error_code_NO_SUCH_METHOD = -3,
  rpc_response_header_application_error_code_INVALID_MESSAGE = -4,
  rpc_response_header_application_error_code_METHOD_NOT_IMPLEMENTED = -5,
  rpc_response_header_application_error_code_rpc_response_header_application_error_code_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  rpc_response_header_application_error_code_rpc_response_header_application_error_code_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool rpc_response_header_application_error_code_IsValid(int value);
const rpc_response_header_application_error_code rpc_response_header_application_error_code_application_error_code_MIN = rpc_response_header_application_error_code_METHOD_NOT_IMPLEMENTED;
const rpc_response_header_application_error_code rpc_response_header_application_error_code_application_error_code_MAX = rpc_response_header_application_error_code_NO_ERROR;
const int rpc_response_header_application_error_code_application_error_code_ARRAYSIZE = rpc_response_header_application_error_code_application_error_code_MAX + 1;

const ::google::protobuf::EnumDescriptor* rpc_response_header_application_error_code_descriptor();
inline const ::std::string& rpc_response_header_application_error_code_Name(rpc_response_header_application_error_code value) {
  return ::google::protobuf::internal::NameOfEnum(
    rpc_response_header_application_error_code_descriptor(), value);
}
inline bool rpc_response_header_application_error_code_Parse(
    const ::std::string& name, rpc_response_header_application_error_code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rpc_response_header_application_error_code>(
    rpc_response_header_application_error_code_descriptor(), name, value);
}
// ===================================================================

class rpc_request_header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpcz.rpc_request_header) */ {
 public:
  rpc_request_header();
  virtual ~rpc_request_header();

  rpc_request_header(const rpc_request_header& from);

  inline rpc_request_header& operator=(const rpc_request_header& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rpc_request_header& default_instance();

  static const rpc_request_header* internal_default_instance();

  void Swap(rpc_request_header* other);

  // implements Message ----------------------------------------------

  inline rpc_request_header* New() const { return New(NULL); }

  rpc_request_header* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rpc_request_header& from);
  void MergeFrom(const rpc_request_header& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rpc_request_header* other);
  void UnsafeMergeFrom(const rpc_request_header& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 event_id = 1;
  void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  ::google::protobuf::int64 event_id() const;
  void set_event_id(::google::protobuf::int64 value);

  // optional int32 deadline = 2;
  void clear_deadline();
  static const int kDeadlineFieldNumber = 2;
  ::google::protobuf::int32 deadline() const;
  void set_deadline(::google::protobuf::int32 value);

  // optional string service = 3;
  void clear_service();
  static const int kServiceFieldNumber = 3;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // optional string method = 4;
  void clear_method();
  static const int kMethodFieldNumber = 4;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // @@protoc_insertion_point(class_scope:rpcz.rpc_request_header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::int64 event_id_;
  ::google::protobuf::int32 deadline_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_rpcz_2eproto_impl();
  friend void  protobuf_AddDesc_rpcz_2eproto_impl();
  friend void protobuf_AssignDesc_rpcz_2eproto();
  friend void protobuf_ShutdownFile_rpcz_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<rpc_request_header> rpc_request_header_default_instance_;

// -------------------------------------------------------------------

class rpc_response_header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpcz.rpc_response_header) */ {
 public:
  rpc_response_header();
  virtual ~rpc_response_header();

  rpc_response_header(const rpc_response_header& from);

  inline rpc_response_header& operator=(const rpc_response_header& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rpc_response_header& default_instance();

  static const rpc_response_header* internal_default_instance();

  void Swap(rpc_response_header* other);

  // implements Message ----------------------------------------------

  inline rpc_response_header* New() const { return New(NULL); }

  rpc_response_header* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rpc_response_header& from);
  void MergeFrom(const rpc_response_header& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rpc_response_header* other);
  void UnsafeMergeFrom(const rpc_response_header& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef rpc_response_header_status_code status_code;
  static const status_code OK =
    rpc_response_header_status_code_OK;
  static const status_code ACTIVE =
    rpc_response_header_status_code_ACTIVE;
  static const status_code INACTIVE =
    rpc_response_header_status_code_INACTIVE;
  static const status_code CANCELLED =
    rpc_response_header_status_code_CANCELLED;
  static const status_code APPLICATION_ERROR =
    rpc_response_header_status_code_APPLICATION_ERROR;
  static const status_code DEADLINE_EXCEEDED =
    rpc_response_header_status_code_DEADLINE_EXCEEDED;
  static const status_code TERMINATED =
    rpc_response_header_status_code_TERMINATED;
  static inline bool status_code_IsValid(int value) {
    return rpc_response_header_status_code_IsValid(value);
  }
  static const status_code status_code_MIN =
    rpc_response_header_status_code_status_code_MIN;
  static const status_code status_code_MAX =
    rpc_response_header_status_code_status_code_MAX;
  static const int status_code_ARRAYSIZE =
    rpc_response_header_status_code_status_code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  status_code_descriptor() {
    return rpc_response_header_status_code_descriptor();
  }
  static inline const ::std::string& status_code_Name(status_code value) {
    return rpc_response_header_status_code_Name(value);
  }
  static inline bool status_code_Parse(const ::std::string& name,
      status_code* value) {
    return rpc_response_header_status_code_Parse(name, value);
  }

  typedef rpc_response_header_application_error_code application_error_code;
  static const application_error_code NO_ERROR =
    rpc_response_header_application_error_code_NO_ERROR;
  static const application_error_code INVALID_HEADER =
    rpc_response_header_application_error_code_INVALID_HEADER;
  static const application_error_code NO_SUCH_SERVICE =
    rpc_response_header_application_error_code_NO_SUCH_SERVICE;
  static const application_error_code NO_SUCH_METHOD =
    rpc_response_header_application_error_code_NO_SUCH_METHOD;
  static const application_error_code INVALID_MESSAGE =
    rpc_response_header_application_error_code_INVALID_MESSAGE;
  static const application_error_code METHOD_NOT_IMPLEMENTED =
    rpc_response_header_application_error_code_METHOD_NOT_IMPLEMENTED;
  static inline bool application_error_code_IsValid(int value) {
    return rpc_response_header_application_error_code_IsValid(value);
  }
  static const application_error_code application_error_code_MIN =
    rpc_response_header_application_error_code_application_error_code_MIN;
  static const application_error_code application_error_code_MAX =
    rpc_response_header_application_error_code_application_error_code_MAX;
  static const int application_error_code_ARRAYSIZE =
    rpc_response_header_application_error_code_application_error_code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  application_error_code_descriptor() {
    return rpc_response_header_application_error_code_descriptor();
  }
  static inline const ::std::string& application_error_code_Name(application_error_code value) {
    return rpc_response_header_application_error_code_Name(value);
  }
  static inline bool application_error_code_Parse(const ::std::string& name,
      application_error_code* value) {
    return rpc_response_header_application_error_code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .rpcz.rpc_response_header.status_code status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::rpcz::rpc_response_header_status_code status() const;
  void set_status(::rpcz::rpc_response_header_status_code value);

  // optional int32 application_error = 2;
  void clear_application_error();
  static const int kApplicationErrorFieldNumber = 2;
  ::google::protobuf::int32 application_error() const;
  void set_application_error(::google::protobuf::int32 value);

  // optional string error = 3;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:rpcz.rpc_response_header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  int status_;
  ::google::protobuf::int32 application_error_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_rpcz_2eproto_impl();
  friend void  protobuf_AddDesc_rpcz_2eproto_impl();
  friend void protobuf_AssignDesc_rpcz_2eproto();
  friend void protobuf_ShutdownFile_rpcz_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<rpc_response_header> rpc_response_header_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// rpc_request_header

// optional int64 event_id = 1;
inline void rpc_request_header::clear_event_id() {
  event_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 rpc_request_header::event_id() const {
  // @@protoc_insertion_point(field_get:rpcz.rpc_request_header.event_id)
  return event_id_;
}
inline void rpc_request_header::set_event_id(::google::protobuf::int64 value) {
  
  event_id_ = value;
  // @@protoc_insertion_point(field_set:rpcz.rpc_request_header.event_id)
}

// optional int32 deadline = 2;
inline void rpc_request_header::clear_deadline() {
  deadline_ = 0;
}
inline ::google::protobuf::int32 rpc_request_header::deadline() const {
  // @@protoc_insertion_point(field_get:rpcz.rpc_request_header.deadline)
  return deadline_;
}
inline void rpc_request_header::set_deadline(::google::protobuf::int32 value) {
  
  deadline_ = value;
  // @@protoc_insertion_point(field_set:rpcz.rpc_request_header.deadline)
}

// optional string service = 3;
inline void rpc_request_header::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rpc_request_header::service() const {
  // @@protoc_insertion_point(field_get:rpcz.rpc_request_header.service)
  return service_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rpc_request_header::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpcz.rpc_request_header.service)
}
inline void rpc_request_header::set_service(const char* value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpcz.rpc_request_header.service)
}
inline void rpc_request_header::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpcz.rpc_request_header.service)
}
inline ::std::string* rpc_request_header::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:rpcz.rpc_request_header.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rpc_request_header::release_service() {
  // @@protoc_insertion_point(field_release:rpcz.rpc_request_header.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rpc_request_header::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:rpcz.rpc_request_header.service)
}

// optional string method = 4;
inline void rpc_request_header::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rpc_request_header::method() const {
  // @@protoc_insertion_point(field_get:rpcz.rpc_request_header.method)
  return method_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rpc_request_header::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpcz.rpc_request_header.method)
}
inline void rpc_request_header::set_method(const char* value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpcz.rpc_request_header.method)
}
inline void rpc_request_header::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpcz.rpc_request_header.method)
}
inline ::std::string* rpc_request_header::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:rpcz.rpc_request_header.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rpc_request_header::release_method() {
  // @@protoc_insertion_point(field_release:rpcz.rpc_request_header.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rpc_request_header::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:rpcz.rpc_request_header.method)
}

inline const rpc_request_header* rpc_request_header::internal_default_instance() {
  return &rpc_request_header_default_instance_.get();
}
// -------------------------------------------------------------------

// rpc_response_header

// optional .rpcz.rpc_response_header.status_code status = 1;
inline void rpc_response_header::clear_status() {
  status_ = 0;
}
inline ::rpcz::rpc_response_header_status_code rpc_response_header::status() const {
  // @@protoc_insertion_point(field_get:rpcz.rpc_response_header.status)
  return static_cast< ::rpcz::rpc_response_header_status_code >(status_);
}
inline void rpc_response_header::set_status(::rpcz::rpc_response_header_status_code value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:rpcz.rpc_response_header.status)
}

// optional int32 application_error = 2;
inline void rpc_response_header::clear_application_error() {
  application_error_ = 0;
}
inline ::google::protobuf::int32 rpc_response_header::application_error() const {
  // @@protoc_insertion_point(field_get:rpcz.rpc_response_header.application_error)
  return application_error_;
}
inline void rpc_response_header::set_application_error(::google::protobuf::int32 value) {
  
  application_error_ = value;
  // @@protoc_insertion_point(field_set:rpcz.rpc_response_header.application_error)
}

// optional string error = 3;
inline void rpc_response_header::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rpc_response_header::error() const {
  // @@protoc_insertion_point(field_get:rpcz.rpc_response_header.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rpc_response_header::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpcz.rpc_response_header.error)
}
inline void rpc_response_header::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpcz.rpc_response_header.error)
}
inline void rpc_response_header::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpcz.rpc_response_header.error)
}
inline ::std::string* rpc_response_header::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:rpcz.rpc_response_header.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rpc_response_header::release_error() {
  // @@protoc_insertion_point(field_release:rpcz.rpc_response_header.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rpc_response_header::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:rpcz.rpc_response_header.error)
}

inline const rpc_response_header* rpc_response_header::internal_default_instance() {
  return &rpc_response_header_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpcz

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rpcz::rpc_response_header_status_code> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpcz::rpc_response_header_status_code>() {
  return ::rpcz::rpc_response_header_status_code_descriptor();
}
template <> struct is_proto_enum< ::rpcz::rpc_response_header_application_error_code> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpcz::rpc_response_header_application_error_code>() {
  return ::rpcz::rpc_response_header_application_error_code_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpcz_2eproto__INCLUDED
