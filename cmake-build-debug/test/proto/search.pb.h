// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search.proto

#ifndef PROTOBUF_search_2eproto__INCLUDED
#define PROTOBUF_search_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rpcz {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_search_2eproto();
void protobuf_InitDefaults_search_2eproto();
void protobuf_AssignDesc_search_2eproto();
void protobuf_ShutdownFile_search_2eproto();

class SearchRequest;
class SearchResponse;

// ===================================================================

class SearchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpcz.SearchRequest) */ {
 public:
  SearchRequest();
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchRequest& default_instance();

  enum PageNumberPresentCase {
    kPageNumber = 2,
    PAGE_NUMBER_PRESENT_NOT_SET = 0,
  };

  static const SearchRequest* internal_default_instance();

  void Swap(SearchRequest* other);

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const { return New(NULL); }

  SearchRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SearchRequest* other);
  void UnsafeMergeFrom(const SearchRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // optional int32 page_number = 2;
  private:
  bool has_page_number() const;
  public:
  void clear_page_number();
  static const int kPageNumberFieldNumber = 2;
  ::google::protobuf::int32 page_number() const;
  void set_page_number(::google::protobuf::int32 value);

  // optional uint32 version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  PageNumberPresentCase page_number_present_case() const;
  // @@protoc_insertion_point(class_scope:rpcz.SearchRequest)
 private:
  inline void set_has_page_number();

  inline bool has_page_number_present() const;
  void clear_page_number_present();
  inline void clear_has_page_number_present();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::uint32 version_;
  union PageNumberPresentUnion {
    PageNumberPresentUnion() {}
    ::google::protobuf::int32 page_number_;
  } page_number_present_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_search_2eproto_impl();
  friend void  protobuf_AddDesc_search_2eproto_impl();
  friend void protobuf_AssignDesc_search_2eproto();
  friend void protobuf_ShutdownFile_search_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SearchRequest> SearchRequest_default_instance_;

// -------------------------------------------------------------------

class SearchResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpcz.SearchResponse) */ {
 public:
  SearchResponse();
  virtual ~SearchResponse();

  SearchResponse(const SearchResponse& from);

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchResponse& default_instance();

  static const SearchResponse* internal_default_instance();

  void Swap(SearchResponse* other);

  // implements Message ----------------------------------------------

  inline SearchResponse* New() const { return New(NULL); }

  SearchResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchResponse& from);
  void MergeFrom(const SearchResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SearchResponse* other);
  void UnsafeMergeFrom(const SearchResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  const ::std::string& results(int index) const;
  ::std::string* mutable_results(int index);
  void set_results(int index, const ::std::string& value);
  void set_results(int index, const char* value);
  void set_results(int index, const char* value, size_t size);
  ::std::string* add_results();
  void add_results(const ::std::string& value);
  void add_results(const char* value);
  void add_results(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& results() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_results();

  // @@protoc_insertion_point(class_scope:rpcz.SearchResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> results_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_search_2eproto_impl();
  friend void  protobuf_AddDesc_search_2eproto_impl();
  friend void protobuf_AssignDesc_search_2eproto();
  friend void protobuf_ShutdownFile_search_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SearchResponse> SearchResponse_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchRequest

// optional string query = 1;
inline void SearchRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchRequest::query() const {
  // @@protoc_insertion_point(field_get:rpcz.SearchRequest.query)
  return query_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequest::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpcz.SearchRequest.query)
}
inline void SearchRequest::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpcz.SearchRequest.query)
}
inline void SearchRequest::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpcz.SearchRequest.query)
}
inline ::std::string* SearchRequest::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:rpcz.SearchRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchRequest::release_query() {
  // @@protoc_insertion_point(field_release:rpcz.SearchRequest.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:rpcz.SearchRequest.query)
}

// optional int32 page_number = 2;
inline bool SearchRequest::has_page_number() const {
  return page_number_present_case() == kPageNumber;
}
inline void SearchRequest::set_has_page_number() {
  _oneof_case_[0] = kPageNumber;
}
inline void SearchRequest::clear_page_number() {
  if (has_page_number()) {
    page_number_present_.page_number_ = 0;
    clear_has_page_number_present();
  }
}
inline ::google::protobuf::int32 SearchRequest::page_number() const {
  // @@protoc_insertion_point(field_get:rpcz.SearchRequest.page_number)
  if (has_page_number()) {
    return page_number_present_.page_number_;
  }
  return 0;
}
inline void SearchRequest::set_page_number(::google::protobuf::int32 value) {
  if (!has_page_number()) {
    clear_page_number_present();
    set_has_page_number();
  }
  page_number_present_.page_number_ = value;
  // @@protoc_insertion_point(field_set:rpcz.SearchRequest.page_number)
}

// optional uint32 version = 3;
inline void SearchRequest::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 SearchRequest::version() const {
  // @@protoc_insertion_point(field_get:rpcz.SearchRequest.version)
  return version_;
}
inline void SearchRequest::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:rpcz.SearchRequest.version)
}

inline bool SearchRequest::has_page_number_present() const {
  return page_number_present_case() != PAGE_NUMBER_PRESENT_NOT_SET;
}
inline void SearchRequest::clear_has_page_number_present() {
  _oneof_case_[0] = PAGE_NUMBER_PRESENT_NOT_SET;
}
inline SearchRequest::PageNumberPresentCase SearchRequest::page_number_present_case() const {
  return SearchRequest::PageNumberPresentCase(_oneof_case_[0]);
}
inline const SearchRequest* SearchRequest::internal_default_instance() {
  return &SearchRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// SearchResponse

// repeated string results = 1;
inline int SearchResponse::results_size() const {
  return results_.size();
}
inline void SearchResponse::clear_results() {
  results_.Clear();
}
inline const ::std::string& SearchResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:rpcz.SearchResponse.results)
  return results_.Get(index);
}
inline ::std::string* SearchResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:rpcz.SearchResponse.results)
  return results_.Mutable(index);
}
inline void SearchResponse::set_results(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rpcz.SearchResponse.results)
  results_.Mutable(index)->assign(value);
}
inline void SearchResponse::set_results(int index, const char* value) {
  results_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rpcz.SearchResponse.results)
}
inline void SearchResponse::set_results(int index, const char* value, size_t size) {
  results_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rpcz.SearchResponse.results)
}
inline ::std::string* SearchResponse::add_results() {
  // @@protoc_insertion_point(field_add_mutable:rpcz.SearchResponse.results)
  return results_.Add();
}
inline void SearchResponse::add_results(const ::std::string& value) {
  results_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rpcz.SearchResponse.results)
}
inline void SearchResponse::add_results(const char* value) {
  results_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rpcz.SearchResponse.results)
}
inline void SearchResponse::add_results(const char* value, size_t size) {
  results_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rpcz.SearchResponse.results)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchResponse::results() const {
  // @@protoc_insertion_point(field_list:rpcz.SearchResponse.results)
  return results_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SearchResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:rpcz.SearchResponse.results)
  return &results_;
}

inline const SearchResponse* SearchResponse::internal_default_instance() {
  return &SearchResponse_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpcz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_search_2eproto__INCLUDED
