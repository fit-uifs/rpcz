// Copyright 2011 Google Inc. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: nadavs@google.com <Nadav Samet>

#include <iostream>
#include "rpcz/rpcz.hpp"
#include "rpcz/rpc_channel.hpp"
#include "cpp/search.pb.h"
#include "cpp/search.rpcz.h"
#include "cpp/dqlib.pb.h"
#include "cpp/dqlib.rpcz.h"
#include "rpcz/zmq.hpp"
#include<sys/time.h>
#include <thread>
#include <mutex>
#include <chrono>
#include "inirw.h"
#include "benchmark/benchmark_api.h"

using namespace std;

std::vector<bool> result_list;
mutex mt;
char* host = new char[64];

bool cla_test( rpcz::application& application, const examples::MvoAssetAllocationInput& dqrequest, int ncycle)
{
        examples::DQService_Stub dq_stub(application.create_rpc_channel(host), true);
        examples::MvoAssetAllocationOutput dqresponse;

        try {
            dq_stub.CLAService(dqrequest, &dqresponse, 10000);
            bool ret = std::abs(dqresponse.target_value() - 0.00277) < 0.00001;
            mt.lock();
            result_list.push_back(ret);
            mt.unlock();
            return ret;
        }
        catch (rpcz::rpc_error &e) {
            cout << "Error: " << e.what() << endl;
        }
        catch (zmq::error_t& e) {
            std::cerr << "ZMQ EXCEPTION : " << e.what() << std::endl;
        } catch (std::exception& e) {
            std::cerr << "STD EXCEPTION : " << e.what() << std::endl;
        } catch (...) {
            std::cerr << " UNTRAPPED EXCEPTION " << std::endl;
        }
        return false;

}

rpcz::application* application=NULL;
examples::MvoAssetAllocationInput dqrequest;
static void cla(benchmark::State& state)
{
    if (state.thread_index == 0)
    {
     // Setup code here.
    iniFileLoad("testConfig.ini");

    iniGetString("test","host",host,64,"");
    //std::cout << "Host " << host;// << "\nthread_cnt:  " << thread_cnt << "\ncycle_cnt: " << cycle_cnt << "\n";

    zmq::context_t * context = new zmq::context_t(1,20480);
    rpcz::application::options opt;
    opt.zeromq_context = context;
    application =  new rpcz::application(opt);
//  examples::SearchService_Stub search_stub(application.create_rpc_channel(
//          "tcp://localhost:5555"), true);
//  examples::SearchRequest request;
//  examples::SearchResponse response;
//  request.set_query("gold");
//
//  cout << "Sending request." << endl;
//  try {
//    search_stub.Search(request, &response, 1000);
//    cout << response.DebugString() << endl;
//  } catch (rpcz::rpc_error &e) {
//    cout << "Error: " << e.what() << endl;;
//  }
  //cout << "make input" << endl;

  dqrequest.set_target_type("MINVAR");
  dqrequest.set_strategy("MVOSTRANDARD");
  examples::Matrix* matrix = new examples::Matrix;
  matrix->set_cols(2);
  matrix->set_rows(2);
  matrix->add_data(0.00215);
  matrix->add_data(-0.00062);
  matrix->add_data(-0.00062);
  matrix->add_data(0.00069);
  matrix->set_storage_order(::examples::Matrix_StorageOrder_RowMajor);
  dqrequest.set_allocated_asset_return(matrix) ;//.set_asset_return.rows=2;
  examples::Vector* lb = new examples::Vector;
  lb->add_data(0);
  lb->add_data(0);
  dqrequest.set_allocated_lower_bound(lb);

  examples::Vector* ub = new examples::Vector;
  ub->add_data(1.0);
  ub->add_data(1.0);
  dqrequest.set_allocated_upper_bound(ub);

  dqrequest.set_target_value(0) ;
  dqrequest.set_num_returns_for_mean (2);
  dqrequest.set_annualization_scale (2);
  dqrequest.set_num_ef_points (10);

    }

    struct  timeval    tvstart,tvend;
    memset(&tvstart,0,sizeof(struct timeval));
    memset(&tvend,0,sizeof(struct timeval));

    int succ_cnt=0,fail_cnt=0,max_time=0,median=0,mean=0;
    gettimeofday(&tvstart,NULL);
    while (state.KeepRunning()){

        if(cla_test(*application,dqrequest,0))
            succ_cnt++;
        else
            fail_cnt++;
    }

        gettimeofday(&tvend,NULL);
        int cnt = (tvend.tv_sec-tvstart.tv_sec)*1000000+(tvend.tv_usec-tvstart.tv_usec);
    if(fail_cnt>0){
        stringstream label;
        label << "fail: " << fail_cnt;
        state.SetLabel(label.str());
    }
        //std::cout << "succ_cnt: " << succ_cnt <<endl;

    std::cout<< "all_cnt: " << succ_cnt + fail_cnt << " used time: " << cnt <<" us" <<endl;
    if (state.thread_index == 0)
    {
        // Teardown code here.
        delete application;
    }
}

void BM_basic(benchmark::State& state) {
    while (state.KeepRunning()) {
    }
}
BENCHMARK(BM_basic);

//BENCHMARK(cla)->MinTime(1.0)->Threads(10)->Unit(benchmark::kMicrosecond)->Repetitions(5);//;
BENCHMARK(cla)->Unit(benchmark::kMicrosecond)->Threads(500);//->UseRealTime();
//BENCHMARK(BM_cla)->ThreadPerCpu();

BENCHMARK_MAIN()

